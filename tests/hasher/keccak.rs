use accumulators::hasher::{keccak::KeccakHasher, Hasher};

#[test]
fn genesis() {
    let hasher = KeccakHasher::default();

    assert_eq!(
        hasher.get_genesis().unwrap(),
        "0xce92cc894a17c107be8788b58092c22cd0634d1489ca0ce5b4a045a1ce31b168".to_string()
    );
}

#[test]
fn should_compute_a_hash() {
    let hasher = KeccakHasher::default();

    let a = "0xa4b1d5793b631de611c922ea3ec938b359b3a49e687316d9a79c27be8ce84590".to_string();
    let b = "0xa4b1d5793b631de611c922ea3ec938b359b3a49e687316d9a79c27be8ce84590".to_string();

    assert!(hasher.is_element_size_valid(&a).unwrap());
    assert!(hasher.is_element_size_valid(&b).unwrap());

    let result = hasher.hash(vec![a, b]).unwrap();

    assert_eq!(
        result,
        "0xa960dc82e45665d5b1340ee84f6c3f27abaac8235a1a3b7e954001c1bc682268".to_string()
    );
}

#[test]
fn should_compute_block_hash() {
    let hasher = KeccakHasher::new();

    let raw_hex_rlp = "0xto_lowercase().to_string();
    let new_block_hash = hasher.hash(vec![raw_hex_rlp]).unwrap();

    assert_eq!(
        new_block_hash,
        "0xfc9515e185a5a1b88dfb1708d397339019ce947083fc7ad64b048f885d48a9cc".to_string()
    )
}

#[test]
fn should_apply_padding() {
    let hasher = KeccakHasher::new();
    let a = hex::encode("131");
    let b = hex::encode("10");
    let hash = hasher.hash(vec![a, b]).unwrap();

    print!("{}", hash);

    assert_eq!(hash.len(), 64 + 2)
}
